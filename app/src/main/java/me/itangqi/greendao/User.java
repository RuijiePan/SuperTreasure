package me.itangqi.greendao;

import java.util.List;
import me.itangqi.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER".
 */
public class User {

    private Long id;
    private String belongschool;
    private String sex;
    private String userPic;
    private String nickName;
    private String userName;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<New> news;
    private List<Mood> moods;
    private List<Coupon> coupons;
    private List<Goods> goods;
    private List<MoodMessage> moodmessages;

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, String belongschool, String sex, String userPic, String nickName, String userName) {
        this.id = id;
        this.belongschool = belongschool;
        this.sex = sex;
        this.userPic = userPic;
        this.nickName = nickName;
        this.userName = userName;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getBelongschool() {
        return belongschool;
    }

    public void setBelongschool(String belongschool) {
        this.belongschool = belongschool;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getUserPic() {
        return userPic;
    }

    public void setUserPic(String userPic) {
        this.userPic = userPic;
    }

    public String getNickName() {
        return nickName;
    }

    public void setNickName(String nickName) {
        this.nickName = nickName;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<New> getNews() {
        if (news == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NewDao targetDao = daoSession.getNewDao();
            List<New> newsNew = targetDao._queryUser_News(id);
            synchronized (this) {
                if(news == null) {
                    news = newsNew;
                }
            }
        }
        return news;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNews() {
        news = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Mood> getMoods() {
        if (moods == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoodDao targetDao = daoSession.getMoodDao();
            List<Mood> moodsNew = targetDao._queryUser_Moods(id);
            synchronized (this) {
                if(moods == null) {
                    moods = moodsNew;
                }
            }
        }
        return moods;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMoods() {
        moods = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Coupon> getCoupons() {
        if (coupons == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CouponDao targetDao = daoSession.getCouponDao();
            List<Coupon> couponsNew = targetDao._queryUser_Coupons(id);
            synchronized (this) {
                if(coupons == null) {
                    coupons = couponsNew;
                }
            }
        }
        return coupons;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCoupons() {
        coupons = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Goods> getGoods() {
        if (goods == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GoodsDao targetDao = daoSession.getGoodsDao();
            List<Goods> goodsNew = targetDao._queryUser_Goods(id);
            synchronized (this) {
                if(goods == null) {
                    goods = goodsNew;
                }
            }
        }
        return goods;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGoods() {
        goods = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MoodMessage> getMoodmessages() {
        if (moodmessages == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MoodMessageDao targetDao = daoSession.getMoodMessageDao();
            List<MoodMessage> moodmessagesNew = targetDao._queryUser_Moodmessages(id);
            synchronized (this) {
                if(moodmessages == null) {
                    moodmessages = moodmessagesNew;
                }
            }
        }
        return moodmessages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMoodmessages() {
        moodmessages = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

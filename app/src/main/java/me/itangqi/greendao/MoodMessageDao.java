package me.itangqi.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import me.itangqi.greendao.MoodMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOOD_MESSAGE".
*/
public class MoodMessageDao extends AbstractDao<MoodMessage, Long> {

    public static final String TABLENAME = "MOOD_MESSAGE";

    /**
     * Properties of entity MoodMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, Long.class, "user_id", false, "USER_ID");
        public final static Property Message = new Property(2, String.class, "message", false, "MESSAGE");
        public final static Property BodyType = new Property(3, String.class, "bodyType", false, "BODY_TYPE");
        public final static Property Date = new Property(4, String.class, "date", false, "DATE");
        public final static Property FromUserName = new Property(5, String.class, "fromUserName", false, "FROM_USER_NAME");
        public final static Property FromNickName = new Property(6, String.class, "fromNickName", false, "FROM_NICK_NAME");
        public final static Property HadRead = new Property(7, Boolean.class, "hadRead", false, "HAD_READ");
    };

    private Query<MoodMessage> user_MoodmessagesQuery;

    public MoodMessageDao(DaoConfig config) {
        super(config);
    }
    
    public MoodMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOOD_MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: user_id
                "\"MESSAGE\" TEXT," + // 2: message
                "\"BODY_TYPE\" TEXT," + // 3: bodyType
                "\"DATE\" TEXT," + // 4: date
                "\"FROM_USER_NAME\" TEXT," + // 5: fromUserName
                "\"FROM_NICK_NAME\" TEXT," + // 6: fromNickName
                "\"HAD_READ\" INTEGER);"); // 7: hadRead
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOOD_MESSAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MoodMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(3, message);
        }
 
        String bodyType = entity.getBodyType();
        if (bodyType != null) {
            stmt.bindString(4, bodyType);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
 
        String fromUserName = entity.getFromUserName();
        if (fromUserName != null) {
            stmt.bindString(6, fromUserName);
        }
 
        String fromNickName = entity.getFromNickName();
        if (fromNickName != null) {
            stmt.bindString(7, fromNickName);
        }
 
        Boolean hadRead = entity.getHadRead();
        if (hadRead != null) {
            stmt.bindLong(8, hadRead ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MoodMessage readEntity(Cursor cursor, int offset) {
        MoodMessage entity = new MoodMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // message
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bodyType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fromUserName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fromNickName
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // hadRead
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MoodMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMessage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBodyType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFromUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFromNickName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHadRead(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MoodMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MoodMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "moodmessages" to-many relationship of User. */
    public List<MoodMessage> _queryUser_Moodmessages(Long user_id) {
        synchronized (this) {
            if (user_MoodmessagesQuery == null) {
                QueryBuilder<MoodMessage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.User_id.eq(null));
                user_MoodmessagesQuery = queryBuilder.build();
            }
        }
        Query<MoodMessage> query = user_MoodmessagesQuery.forCurrentThread();
        query.setParameter(0, user_id);
        return query.list();
    }

}
